{"_id":"string-escape","_rev":"39-52205c09bdc1cf5aa826d45d37328e15","name":"string-escape","description":"A JavaScript library for escaping JavaScript strings while generating the shortest possible valid output.","dist-tags":{"latest":"0.3.0"},"versions":{"0.1.0":{"name":"string-escape","version":"0.1.0","description":"A JavaScript library for escaping JavaScript strings while generating the shortest possible valid output.","homepage":"http://mths.be/stringescape","main":"string-escape.js","keywords":["string","escape","tool"],"licenses":[{"type":"MIT","url":"http://mths.be/mit"},{"type":"GPL","url":"http://mths.be/gpl"}],"author":{"name":"Mathias Bynens","url":"http://mathiasbynens.be/"},"repository":{"type":"git","url":"https://github.com/mathiasbynens/javascript-string-escape.git"},"bugs":{"url":"https://github.com/mathiasbynens/javascript-string-escape/issues"},"directories":{"test":"tests"},"scripts":{"test":"node tests/tests.js"},"dependencies":{},"devDependencies":{"grunt":"~0.4.1","grunt-shell":"~0.2.2","grunt-template":"~0.1.0","istanbul":"~0.1.36","qunit-clib":"~1.3.0","qunitjs":"~1.11.0","regenerate":"~0.5.1","requirejs":"~2.1.6"},"readme":"# JavaScript string escape [![Build status](https://travis-ci.org/mathiasbynens/javascript-string-escape.png?branch=master)](https://travis-ci.org/mathiasbynens/javascript-string-escape) [![Dependency status](https://gemnasium.com/mathiasbynens/javascript-string-escape.png)](https://gemnasium.com/mathiasbynens/javascript-string-escape)\n\nThis is a JavaScript library for escaping JavaScript strings while generating the shortest possible valid output.\n\nFeel free to fork if you see possible improvements!\n\n## Installation\n\nIn a browser:\n\n```html\n<script src=\"string-escape.js\"></script>\n```\n\nVia [npm](http://npmjs.org/):\n\n```bash\nnpm install string-escape\n```\n\nIn [Narwhal](http://narwhaljs.org/), [Node.js](http://nodejs.org/), and [RingoJS](http://ringojs.org/):\n\n```js\nvar stringEscape = require('string-escape');\n```\n\nIn [Rhino](http://www.mozilla.org/rhino/):\n\n```js\nload('string-escape.js');\n```\n\nUsing an AMD loader like [RequireJS](http://requirejs.org/):\n\n```js\nrequire(\n  {\n    'paths': {\n      'string-escape': 'path/to/string-escape'\n    }\n  },\n  ['string-escape'],\n  function(stringEscape) {\n    console.log(stringEscape);\n  }\n);\n```\n\n## API\n\n### `stringEscape(string, options)`\n\nThis function takes a string and returns an escaped version of the string where any characters that are not printable ASCII symbols are escaped using the shortest possible (but valid) [escape sequences for use in JavaScript strings](http://mathiasbynens.be/notes/javascript-escapes).\n\n```js\nstringEscape('Ich ‚ô• B√ºcher');\n// ‚Üí 'Ich \\\\u2665 B\\\\xFCcher'\n\nstringEscape('foo ùåÜ bar');\n// ‚Üí 'foo \\\\uD834\\\\uDF06 bar'\n```\n\nThe optional `options` argument accepts an object with the following options:\n\n#### `quotes`\n\nThe default value for the `quotes` option is `'single'`. This means that any occurences of `'` in the input string will be escaped as `\\'`, so that the output can be used in a string literal wrapped in single quotes.\n\n```js\nstringEscape('Lorem ipsum \"dolor\" sit \\'amet\\' etc.');\n// ‚Üí 'Lorem ipsum \"dolor\" sit \\\\\\'amet\\\\\\' etc.'\n\nstringEscape('Lorem ipsum \"dolor\" sit \\'amet\\' etc.', {\n  'quotes': 'single'\n});\n// ‚Üí 'Lorem ipsum \"dolor\" sit \\\\\\'amet\\\\\\' etc.'\n// ‚Üí \"Lorem ipsum \\\"dolor\\\" sit \\\\'amet\\\\' etc.\"\n```\n\nIf you want to use the output as part of a string literal wrapped in double quotes, set the `quotes` option to `'double'`.\n\n```js\nstringEscape('Lorem ipsum \"dolor\" sit \\'amet\\' etc.', {\n  'quotes': 'double'\n});\n// ‚Üí 'Lorem ipsum \\\\\"dolor\\\\\" sit \\'amet\\' etc.'\n// ‚Üí \"Lorem ipsum \\\\\\\"dolor\\\\\\\" sit 'amet' etc.\"\n```\n\n### `stringEscape.version`\n\nA string representing the semantic version number.\n\n## Support\n\nThis library has been tested in at least Chrome 27-29, Firefox 3-22, Safari 4-6, Opera 10-12, IE 6-10, Node.js v0.10.0, Narwhal 0.3.2, RingoJS 0.8-0.9, PhantomJS 1.9.0, and Rhino 1.7RC4.\n\n## Unit tests & code coverage\n\nAfter cloning this repository, run `npm install` to install the dependencies needed for development and testing. You may want to install Istanbul _globally_ using `npm install istanbul -g`.\n\nOnce that‚Äôs done, you can run the unit tests in Node using `npm test` or `node tests/tests.js`. To run the tests in Rhino, Ringo, Narwhal, and web browsers as well, use `grunt test`.\n\nTo generate [the code coverage report](http://rawgithub.com/mathiasbynens/javascript-string-escape/master/coverage/string-escape/string-escape.js.html), use `grunt cover`.\n\n## Author\n\n| [![twitter/mathias](http://gravatar.com/avatar/24e08a9ea84deb17ae121074d0f17125?s=70)](http://twitter.com/mathias \"Follow @mathias on Twitter\") |\n|---|\n| [Mathias Bynens](http://mathiasbynens.be/) |\n\n## License\n\nThis library is dual licensed under the [MIT](http://mths.be/mit) and [GPL](http://mths.be/gpl) licenses.\n","readmeFilename":"README.md","_id":"string-escape@0.1.0","dist":{"shasum":"570c9c25f6805681f68afa804970c59792c48fe9","tarball":"http://registry.npmjs.org/string-escape/-/string-escape-0.1.0.tgz"},"_from":".","_npmVersion":"1.2.19","_npmUser":{"name":"mathias","email":"mathias@qiwi.be"},"maintainers":[{"name":"mathias","email":"mathias@qiwi.be"}],"deprecated":"Package has been deprecated in favor of `jsesc`. Please `npm install jsesc` instead."},"0.1.1":{"name":"string-escape","version":"0.1.1","description":"A JavaScript library for escaping JavaScript strings while generating the shortest possible valid output.","homepage":"http://mths.be/stringescape","main":"string-escape.js","keywords":["string","escape","tool"],"licenses":[{"type":"MIT","url":"http://mths.be/mit"},{"type":"GPL","url":"http://mths.be/gpl"}],"author":{"name":"Mathias Bynens","url":"http://mathiasbynens.be/"},"repository":{"type":"git","url":"https://github.com/mathiasbynens/javascript-string-escape.git"},"bugs":{"url":"https://github.com/mathiasbynens/javascript-string-escape/issues"},"directories":{"test":"tests"},"scripts":{"test":"node tests/tests.js"},"dependencies":{},"devDependencies":{"grunt":"~0.4.1","grunt-shell":"~0.2.2","grunt-template":"~0.1.0","istanbul":"~0.1.36","qunit-clib":"~1.3.0","qunitjs":"~1.11.0","regenerate":"~0.5.1","requirejs":"~2.1.6"},"readme":"# JavaScript string escape [![Build status](https://travis-ci.org/mathiasbynens/javascript-string-escape.png?branch=master)](https://travis-ci.org/mathiasbynens/javascript-string-escape) [![Dependency status](https://gemnasium.com/mathiasbynens/javascript-string-escape.png)](https://gemnasium.com/mathiasbynens/javascript-string-escape)\n\nThis is a JavaScript library for escaping JavaScript strings while generating the shortest possible valid output.\n\nFeel free to fork if you see possible improvements!\n\n## Installation\n\nIn a browser:\n\n```html\n<script src=\"string-escape.js\"></script>\n```\n\nVia [npm](http://npmjs.org/):\n\n```bash\nnpm install string-escape\n```\n\nIn [Narwhal](http://narwhaljs.org/), [Node.js](http://nodejs.org/), and [RingoJS](http://ringojs.org/):\n\n```js\nvar stringEscape = require('string-escape');\n```\n\nIn [Rhino](http://www.mozilla.org/rhino/):\n\n```js\nload('string-escape.js');\n```\n\nUsing an AMD loader like [RequireJS](http://requirejs.org/):\n\n```js\nrequire(\n  {\n    'paths': {\n      'string-escape': 'path/to/string-escape'\n    }\n  },\n  ['string-escape'],\n  function(stringEscape) {\n    console.log(stringEscape);\n  }\n);\n```\n\n## API\n\n### `stringEscape(string, options)`\n\nThis function takes a string and returns an escaped version of the string where any characters that are not printable ASCII symbols are escaped using the shortest possible (but valid) [escape sequences for use in JavaScript strings](http://mathiasbynens.be/notes/javascript-escapes).\n\n```js\nstringEscape('Ich ‚ô• B√ºcher');\n// ‚Üí 'Ich \\\\u2665 B\\\\xFCcher'\n\nstringEscape('foo ùåÜ bar');\n// ‚Üí 'foo \\\\uD834\\\\uDF06 bar'\n```\n\nThe optional `options` argument accepts an object with the following options:\n\n#### `quotes`\n\nThe default value for the `quotes` option is `'single'`. This means that any occurences of `'` in the input string will be escaped as `\\'`, so that the output can be used in a string literal wrapped in single quotes.\n\n```js\nstringEscape('Lorem ipsum \"dolor\" sit \\'amet\\' etc.');\n// ‚Üí 'Lorem ipsum \"dolor\" sit \\\\\\'amet\\\\\\' etc.'\n\nstringEscape('Lorem ipsum \"dolor\" sit \\'amet\\' etc.', {\n  'quotes': 'single'\n});\n// ‚Üí 'Lorem ipsum \"dolor\" sit \\\\\\'amet\\\\\\' etc.'\n// ‚Üí \"Lorem ipsum \\\"dolor\\\" sit \\\\'amet\\\\' etc.\"\n```\n\nIf you want to use the output as part of a string literal wrapped in double quotes, set the `quotes` option to `'double'`.\n\n```js\nstringEscape('Lorem ipsum \"dolor\" sit \\'amet\\' etc.', {\n  'quotes': 'double'\n});\n// ‚Üí 'Lorem ipsum \\\\\"dolor\\\\\" sit \\'amet\\' etc.'\n// ‚Üí \"Lorem ipsum \\\\\\\"dolor\\\\\\\" sit 'amet' etc.\"\n```\n\n#### `wrap`\n\nThe `wrap` option takes a boolean value (`true` or `false`), and defaults to `false` (disabled). When enabled, the output will be a valid JavaScript string literal wrapped in quotes. The type of quotes can be specified through the `quotes` setting.\n\n```js\nstringEscape('Lorem ipsum \"dolor\" sit \\'amet\\' etc.', {\n  'quotes': 'single',\n  'wrap': true\n});\n// ‚Üí '\\'Lorem ipsum \"dolor\" sit \\\\\\'amet\\\\\\' etc.\\''\n// ‚Üí \"\\'Lorem ipsum \\\"dolor\\\" sit \\\\\\'amet\\\\\\' etc.\\'\"\n\nstringEscape('Lorem ipsum \"dolor\" sit \\'amet\\' etc.', {\n  'quotes': 'double',\n  'wrap': true\n});\n// ‚Üí '\"Lorem ipsum \\\\\"dolor\\\\\" sit \\'amet\\' etc.\"'\n// ‚Üí \"\\\"Lorem ipsum \\\\\\\"dolor\\\\\\\" sit \\'amet\\' etc.\\\"\"\n```\n\n### `stringEscape.version`\n\nA string representing the semantic version number.\n\n## Support\n\nThis library has been tested in at least Chrome 27-29, Firefox 3-22, Safari 4-6, Opera 10-12, IE 6-10, Node.js v0.10.0, Narwhal 0.3.2, RingoJS 0.8-0.9, PhantomJS 1.9.0, and Rhino 1.7RC4.\n\n## Unit tests & code coverage\n\nAfter cloning this repository, run `npm install` to install the dependencies needed for development and testing. You may want to install Istanbul _globally_ using `npm install istanbul -g`.\n\nOnce that‚Äôs done, you can run the unit tests in Node using `npm test` or `node tests/tests.js`. To run the tests in Rhino, Ringo, Narwhal, and web browsers as well, use `grunt test`.\n\nTo generate [the code coverage report](http://rawgithub.com/mathiasbynens/javascript-string-escape/master/coverage/string-escape/string-escape.js.html), use `grunt cover`.\n\n## Author\n\n| [![twitter/mathias](http://gravatar.com/avatar/24e08a9ea84deb17ae121074d0f17125?s=70)](http://twitter.com/mathias \"Follow @mathias on Twitter\") |\n|---|\n| [Mathias Bynens](http://mathiasbynens.be/) |\n\n## License\n\nThis library is dual licensed under the [MIT](http://mths.be/mit) and [GPL](http://mths.be/gpl) licenses.\n","readmeFilename":"README.md","_id":"string-escape@0.1.1","dist":{"shasum":"41692b4f0d354b0a1a9413768f81c0e4e93d6e05","tarball":"http://registry.npmjs.org/string-escape/-/string-escape-0.1.1.tgz"},"_from":".","_npmVersion":"1.2.19","_npmUser":{"name":"mathias","email":"mathias@qiwi.be"},"maintainers":[{"name":"mathias","email":"mathias@qiwi.be"}],"deprecated":"Package has been deprecated in favor of `jsesc`. Please `npm install jsesc` instead."},"0.1.2":{"name":"string-escape","version":"0.1.2","description":"A JavaScript library for escaping JavaScript strings while generating the shortest possible valid output.","homepage":"http://mths.be/stringescape","main":"string-escape.js","keywords":["string","escape","tool"],"licenses":[{"type":"MIT","url":"http://mths.be/mit"},{"type":"GPL","url":"http://mths.be/gpl"}],"author":{"name":"Mathias Bynens","url":"http://mathiasbynens.be/"},"repository":{"type":"git","url":"https://github.com/mathiasbynens/javascript-string-escape.git"},"bugs":{"url":"https://github.com/mathiasbynens/javascript-string-escape/issues"},"directories":{"test":"tests"},"scripts":{"test":"node tests/tests.js"},"dependencies":{},"devDependencies":{"grunt":"~0.4.1","grunt-shell":"~0.2.2","grunt-template":"~0.1.0","istanbul":"~0.1.36","qunit-clib":"~1.3.0","qunitjs":"~1.11.0","regenerate":"~0.5.1","requirejs":"~2.1.6"},"readme":"ERROR: No README data found!","_id":"string-escape@0.1.2","dist":{"shasum":"207796292828ddc5bbd60636e2e4974a19ae23e6","tarball":"http://registry.npmjs.org/string-escape/-/string-escape-0.1.2.tgz"},"_from":".","_npmVersion":"1.2.19","_npmUser":{"name":"mathias","email":"mathias@qiwi.be"},"maintainers":[{"name":"mathias","email":"mathias@qiwi.be"}],"deprecated":"Package has been deprecated in favor of `jsesc`. Please `npm install jsesc` instead."},"0.1.3":{"name":"string-escape","version":"0.1.3","description":"A JavaScript library for escaping JavaScript strings while generating the shortest possible valid output.","homepage":"http://mths.be/stringescape","main":"string-escape.js","keywords":["string","escape","tool"],"licenses":[{"type":"MIT","url":"http://mths.be/mit"},{"type":"GPL","url":"http://mths.be/gpl"}],"author":{"name":"Mathias Bynens","url":"http://mathiasbynens.be/"},"repository":{"type":"git","url":"https://github.com/mathiasbynens/javascript-string-escape.git"},"bugs":{"url":"https://github.com/mathiasbynens/javascript-string-escape/issues"},"directories":{"test":"tests"},"scripts":{"test":"node tests/tests.js"},"dependencies":{},"devDependencies":{"grunt":"~0.4.1","grunt-shell":"~0.2.2","grunt-template":"~0.1.0","istanbul":"~0.1.36","qunit-clib":"~1.3.0","qunitjs":"~1.11.0","regenerate":"~0.5.1","requirejs":"~2.1.6"},"readme":"# JavaScript string escape [![Build status](https://travis-ci.org/mathiasbynens/javascript-string-escape.png?branch=master)](https://travis-ci.org/mathiasbynens/javascript-string-escape) [![Dependency status](https://gemnasium.com/mathiasbynens/javascript-string-escape.png)](https://gemnasium.com/mathiasbynens/javascript-string-escape)\n\nThis is a JavaScript library for escaping JavaScript strings while generating the shortest possible valid output.\n\nFeel free to fork if you see possible improvements!\n\n## Installation\n\nVia [Bower](http://bower.io/):\n\n```bash\nbower install string-escape\n```\n\nVia [Component](https://github.com/component/component):\n\n```bash\ncomponent install mathiasbynens/javascript-string-escape\n```\n\nVia [npm](http://npmjs.org/):\n\n```bash\nnpm install string-escape\n```\n\nIn a browser:\n\n```html\n<script src=\"string-escape.js\"></script>\n```\n\nIn [Narwhal](http://narwhaljs.org/), [Node.js](http://nodejs.org/), and [RingoJS](http://ringojs.org/):\n\n```js\nvar stringEscape = require('string-escape');\n```\n\nIn [Rhino](http://www.mozilla.org/rhino/):\n\n```js\nload('string-escape.js');\n```\n\nUsing an AMD loader like [RequireJS](http://requirejs.org/):\n\n```js\nrequire(\n  {\n    'paths': {\n      'string-escape': 'path/to/string-escape'\n    }\n  },\n  ['string-escape'],\n  function(stringEscape) {\n    console.log(stringEscape);\n  }\n);\n```\n\n## API\n\n### `stringEscape(string, options)`\n\nThis function takes a string and returns an escaped version of the string where any characters that are not printable ASCII symbols are escaped using the shortest possible (but valid) [escape sequences for use in JavaScript strings](http://mathiasbynens.be/notes/javascript-escapes).\n\n```js\nstringEscape('Ich ‚ô• B√ºcher');\n// ‚Üí 'Ich \\\\u2665 B\\\\xFCcher'\n\nstringEscape('foo ùåÜ bar');\n// ‚Üí 'foo \\\\uD834\\\\uDF06 bar'\n```\n\nThe optional `options` argument accepts an object with the following options:\n\n#### `quotes`\n\nThe default value for the `quotes` option is `'single'`. This means that any occurences of `'` in the input string will be escaped as `\\'`, so that the output can be used in a string literal wrapped in single quotes.\n\n```js\nstringEscape('Lorem ipsum \"dolor\" sit \\'amet\\' etc.');\n// ‚Üí 'Lorem ipsum \"dolor\" sit \\\\\\'amet\\\\\\' etc.'\n\nstringEscape('Lorem ipsum \"dolor\" sit \\'amet\\' etc.', {\n  'quotes': 'single'\n});\n// ‚Üí 'Lorem ipsum \"dolor\" sit \\\\\\'amet\\\\\\' etc.'\n// ‚Üí \"Lorem ipsum \\\"dolor\\\" sit \\\\'amet\\\\' etc.\"\n```\n\nIf you want to use the output as part of a string literal wrapped in double quotes, set the `quotes` option to `'double'`.\n\n```js\nstringEscape('Lorem ipsum \"dolor\" sit \\'amet\\' etc.', {\n  'quotes': 'double'\n});\n// ‚Üí 'Lorem ipsum \\\\\"dolor\\\\\" sit \\'amet\\' etc.'\n// ‚Üí \"Lorem ipsum \\\\\\\"dolor\\\\\\\" sit 'amet' etc.\"\n```\n\n#### `wrap`\n\nThe `wrap` option takes a boolean value (`true` or `false`), and defaults to `false` (disabled). When enabled, the output will be a valid JavaScript string literal wrapped in quotes. The type of quotes can be specified through the `quotes` setting.\n\n```js\nstringEscape('Lorem ipsum \"dolor\" sit \\'amet\\' etc.', {\n  'quotes': 'single',\n  'wrap': true\n});\n// ‚Üí '\\'Lorem ipsum \"dolor\" sit \\\\\\'amet\\\\\\' etc.\\''\n// ‚Üí \"\\'Lorem ipsum \\\"dolor\\\" sit \\\\\\'amet\\\\\\' etc.\\'\"\n\nstringEscape('Lorem ipsum \"dolor\" sit \\'amet\\' etc.', {\n  'quotes': 'double',\n  'wrap': true\n});\n// ‚Üí '\"Lorem ipsum \\\\\"dolor\\\\\" sit \\'amet\\' etc.\"'\n// ‚Üí \"\\\"Lorem ipsum \\\\\\\"dolor\\\\\\\" sit \\'amet\\' etc.\\\"\"\n```\n\n#### `escapeEverything`\n\nThe `escapeEverything` option takes a boolean value (`true` or `false`), and defaults to `false` (disabled). When enabled, all the symbols in the output will be escaped, even printable ASCII symbols.\n\n```js\nstringEscape('lolwat\"foo\\'bar', {\n  'escapeEverything': true\n});\n// ‚Üí '\\\\x6C\\\\x6F\\\\x6C\\\\x77\\\\x61\\\\x74\\\\\"\\\\x66\\\\x6F\\\\x6F\\\\\\'\\\\x62\\\\x61\\\\x72'\n// ‚Üí \"\\\\x6C\\\\x6F\\\\x6C\\\\x77\\\\x61\\\\x74\\\\\\\"\\\\x66\\\\x6F\\\\x6F\\\\'\\\\x62\\\\x61\\\\x72\"\n```\n\n### `stringEscape.version`\n\nA string representing the semantic version number.\n\n## Support\n\nThis library has been tested in at least Chrome 27-29, Firefox 3-22, Safari 4-6, Opera 10-12, IE 6-10, Node.js v0.10.0, Narwhal 0.3.2, RingoJS 0.8-0.9, PhantomJS 1.9.0, and Rhino 1.7RC4.\n\n## Unit tests & code coverage\n\nAfter cloning this repository, run `npm install` to install the dependencies needed for development and testing. You may want to install Istanbul _globally_ using `npm install istanbul -g`.\n\nOnce that‚Äôs done, you can run the unit tests in Node using `npm test` or `node tests/tests.js`. To run the tests in Rhino, Ringo, Narwhal, and web browsers as well, use `grunt test`.\n\nTo generate [the code coverage report](http://rawgithub.com/mathiasbynens/javascript-string-escape/master/coverage/string-escape/string-escape.js.html), use `grunt cover`.\n\n## Author\n\n| [![twitter/mathias](http://gravatar.com/avatar/24e08a9ea84deb17ae121074d0f17125?s=70)](http://twitter.com/mathias \"Follow @mathias on Twitter\") |\n|---|\n| [Mathias Bynens](http://mathiasbynens.be/) |\n\n## License\n\nThis library is dual licensed under the [MIT](http://mths.be/mit) and [GPL](http://mths.be/gpl) licenses.\n","readmeFilename":"README.md","_id":"string-escape@0.1.3","dist":{"shasum":"f23a9754932cdf4e27db938eb36877f14806abee","tarball":"http://registry.npmjs.org/string-escape/-/string-escape-0.1.3.tgz"},"_from":".","_npmVersion":"1.2.19","_npmUser":{"name":"mathias","email":"mathias@qiwi.be"},"maintainers":[{"name":"mathias","email":"mathias@qiwi.be"}],"deprecated":"Package has been deprecated in favor of `jsesc`. Please `npm install jsesc` instead."},"0.1.4":{"name":"string-escape","version":"0.1.4","description":"A JavaScript library for escaping JavaScript strings while generating the shortest possible valid output.","homepage":"http://mths.be/stringescape","main":"string-escape.js","keywords":["string","escape","tool"],"licenses":[{"type":"MIT","url":"http://mths.be/mit"},{"type":"GPL","url":"http://mths.be/gpl"}],"author":{"name":"Mathias Bynens","url":"http://mathiasbynens.be/"},"repository":{"type":"git","url":"https://github.com/mathiasbynens/javascript-string-escape.git"},"bugs":{"url":"https://github.com/mathiasbynens/javascript-string-escape/issues"},"directories":{"test":"tests"},"scripts":{"test":"node tests/tests.js"},"dependencies":{},"devDependencies":{"grunt":"~0.4.1","grunt-shell":"~0.2.2","grunt-template":"~0.1.0","istanbul":"~0.1.36","qunit-clib":"~1.3.0","qunitjs":"~1.11.0","regenerate":"~0.5.1","requirejs":"~2.1.6"},"readme":"# JavaScript string escape [![Build status](https://travis-ci.org/mathiasbynens/javascript-string-escape.png?branch=master)](https://travis-ci.org/mathiasbynens/javascript-string-escape) [![Dependency status](https://gemnasium.com/mathiasbynens/javascript-string-escape.png)](https://gemnasium.com/mathiasbynens/javascript-string-escape)\n\nThis is a JavaScript library for escaping JavaScript strings while generating the shortest possible valid output.\n\nFeel free to fork if you see possible improvements!\n\n## Installation\n\nVia [Bower](http://bower.io/):\n\n```bash\nbower install string-escape\n```\n\nVia [Component](https://github.com/component/component):\n\n```bash\ncomponent install mathiasbynens/javascript-string-escape\n```\n\nVia [npm](http://npmjs.org/):\n\n```bash\nnpm install string-escape\n```\n\nIn a browser:\n\n```html\n<script src=\"string-escape.js\"></script>\n```\n\nIn [Narwhal](http://narwhaljs.org/), [Node.js](http://nodejs.org/), and [RingoJS](http://ringojs.org/):\n\n```js\nvar stringEscape = require('string-escape');\n```\n\nIn [Rhino](http://www.mozilla.org/rhino/):\n\n```js\nload('string-escape.js');\n```\n\nUsing an AMD loader like [RequireJS](http://requirejs.org/):\n\n```js\nrequire(\n  {\n    'paths': {\n      'string-escape': 'path/to/string-escape'\n    }\n  },\n  ['string-escape'],\n  function(stringEscape) {\n    console.log(stringEscape);\n  }\n);\n```\n\n## API\n\n### `stringEscape(string, options)`\n\nThis function takes a string and returns an escaped version of the string where any characters that are not printable ASCII symbols are escaped using the shortest possible (but valid) [escape sequences for use in JavaScript strings](http://mathiasbynens.be/notes/javascript-escapes).\n\n```js\nstringEscape('Ich ‚ô• B√ºcher');\n// ‚Üí 'Ich \\\\u2665 B\\\\xFCcher'\n\nstringEscape('foo ùåÜ bar');\n// ‚Üí 'foo \\\\uD834\\\\uDF06 bar'\n```\n\nThe optional `options` argument accepts an object with the following options:\n\n#### `quotes`\n\nThe default value for the `quotes` option is `'single'`. This means that any occurences of `'` in the input string will be escaped as `\\'`, so that the output can be used in a string literal wrapped in single quotes.\n\n```js\nstringEscape('Lorem ipsum \"dolor\" sit \\'amet\\' etc.');\n// ‚Üí 'Lorem ipsum \"dolor\" sit \\\\\\'amet\\\\\\' etc.'\n\nstringEscape('Lorem ipsum \"dolor\" sit \\'amet\\' etc.', {\n  'quotes': 'single'\n});\n// ‚Üí 'Lorem ipsum \"dolor\" sit \\\\\\'amet\\\\\\' etc.'\n// ‚Üí \"Lorem ipsum \\\"dolor\\\" sit \\\\'amet\\\\' etc.\"\n```\n\nIf you want to use the output as part of a string literal wrapped in double quotes, set the `quotes` option to `'double'`.\n\n```js\nstringEscape('Lorem ipsum \"dolor\" sit \\'amet\\' etc.', {\n  'quotes': 'double'\n});\n// ‚Üí 'Lorem ipsum \\\\\"dolor\\\\\" sit \\'amet\\' etc.'\n// ‚Üí \"Lorem ipsum \\\\\\\"dolor\\\\\\\" sit 'amet' etc.\"\n```\n\n#### `wrap`\n\nThe `wrap` option takes a boolean value (`true` or `false`), and defaults to `false` (disabled). When enabled, the output will be a valid JavaScript string literal wrapped in quotes. The type of quotes can be specified through the `quotes` setting.\n\n```js\nstringEscape('Lorem ipsum \"dolor\" sit \\'amet\\' etc.', {\n  'quotes': 'single',\n  'wrap': true\n});\n// ‚Üí '\\'Lorem ipsum \"dolor\" sit \\\\\\'amet\\\\\\' etc.\\''\n// ‚Üí \"\\'Lorem ipsum \\\"dolor\\\" sit \\\\\\'amet\\\\\\' etc.\\'\"\n\nstringEscape('Lorem ipsum \"dolor\" sit \\'amet\\' etc.', {\n  'quotes': 'double',\n  'wrap': true\n});\n// ‚Üí '\"Lorem ipsum \\\\\"dolor\\\\\" sit \\'amet\\' etc.\"'\n// ‚Üí \"\\\"Lorem ipsum \\\\\\\"dolor\\\\\\\" sit \\'amet\\' etc.\\\"\"\n```\n\n#### `escapeEverything`\n\nThe `escapeEverything` option takes a boolean value (`true` or `false`), and defaults to `false` (disabled). When enabled, all the symbols in the output will be escaped, even printable ASCII symbols.\n\n```js\nstringEscape('lolwat\"foo\\'bar', {\n  'escapeEverything': true\n});\n// ‚Üí '\\\\x6C\\\\x6F\\\\x6C\\\\x77\\\\x61\\\\x74\\\\\"\\\\x66\\\\x6F\\\\x6F\\\\\\'\\\\x62\\\\x61\\\\x72'\n// ‚Üí \"\\\\x6C\\\\x6F\\\\x6C\\\\x77\\\\x61\\\\x74\\\\\\\"\\\\x66\\\\x6F\\\\x6F\\\\'\\\\x62\\\\x61\\\\x72\"\n```\n\n### `stringEscape.version`\n\nA string representing the semantic version number.\n\n## Support\n\nThis library has been tested in at least Chrome 27-29, Firefox 3-22, Safari 4-6, Opera 10-12, IE 6-10, Node.js v0.10.0, Narwhal 0.3.2, RingoJS 0.8-0.9, PhantomJS 1.9.0, and Rhino 1.7RC4.\n\n## Unit tests & code coverage\n\nAfter cloning this repository, run `npm install` to install the dependencies needed for development and testing. You may want to install Istanbul _globally_ using `npm install istanbul -g`.\n\nOnce that‚Äôs done, you can run the unit tests in Node using `npm test` or `node tests/tests.js`. To run the tests in Rhino, Ringo, Narwhal, and web browsers as well, use `grunt test`.\n\nTo generate [the code coverage report](http://rawgithub.com/mathiasbynens/javascript-string-escape/master/coverage/string-escape/string-escape.js.html), use `grunt cover`.\n\n## Author\n\n| [![twitter/mathias](http://gravatar.com/avatar/24e08a9ea84deb17ae121074d0f17125?s=70)](http://twitter.com/mathias \"Follow @mathias on Twitter\") |\n|---|\n| [Mathias Bynens](http://mathiasbynens.be/) |\n\n## License\n\nThis library is dual licensed under the [MIT](http://mths.be/mit) and [GPL](http://mths.be/gpl) licenses.\n","readmeFilename":"README.md","_id":"string-escape@0.1.4","dist":{"shasum":"862e5e05d76c49e5ffe739aef84ed8d569a6035a","tarball":"http://registry.npmjs.org/string-escape/-/string-escape-0.1.4.tgz"},"_from":".","_npmVersion":"1.2.19","_npmUser":{"name":"mathias","email":"mathias@qiwi.be"},"maintainers":[{"name":"mathias","email":"mathias@qiwi.be"}],"deprecated":"Package has been deprecated in favor of `jsesc`. Please `npm install jsesc` instead."},"0.1.5":{"name":"string-escape","version":"0.1.5","description":"A JavaScript library for escaping JavaScript strings while generating the shortest possible valid output.","homepage":"http://mths.be/stringescape","main":"string-escape.js","keywords":["string","escape","tool"],"licenses":[{"type":"MIT","url":"http://mths.be/mit"},{"type":"GPL","url":"http://mths.be/gpl"}],"author":{"name":"Mathias Bynens","url":"http://mathiasbynens.be/"},"repository":{"type":"git","url":"https://github.com/mathiasbynens/javascript-string-escape.git"},"bugs":{"url":"https://github.com/mathiasbynens/javascript-string-escape/issues"},"directories":{"test":"tests"},"scripts":{"test":"node tests/tests.js"},"dependencies":{},"devDependencies":{"grunt":"~0.4.1","grunt-shell":"~0.2.2","grunt-template":"~0.1.0","istanbul":"~0.1.36","qunit-clib":"~1.3.0","qunitjs":"~1.11.0","regenerate":"~0.5.1","requirejs":"~2.1.6"},"readme":"# JavaScript string escape [![Build status](https://travis-ci.org/mathiasbynens/javascript-string-escape.png?branch=master)](https://travis-ci.org/mathiasbynens/javascript-string-escape) [![Dependency status](https://gemnasium.com/mathiasbynens/javascript-string-escape.png)](https://gemnasium.com/mathiasbynens/javascript-string-escape)\n\nThis is a JavaScript library for escaping JavaScript strings while generating the shortest possible valid output.\n\nFeel free to fork if you see possible improvements!\n\n## Installation\n\nVia [Bower](http://bower.io/):\n\n```bash\nbower install string-escape\n```\n\nVia [Component](https://github.com/component/component):\n\n```bash\ncomponent install mathiasbynens/javascript-string-escape\n```\n\nVia [npm](http://npmjs.org/):\n\n```bash\nnpm install string-escape\n```\n\nIn a browser:\n\n```html\n<script src=\"string-escape.js\"></script>\n```\n\nIn [Narwhal](http://narwhaljs.org/), [Node.js](http://nodejs.org/), and [RingoJS](http://ringojs.org/):\n\n```js\nvar stringEscape = require('string-escape');\n```\n\nIn [Rhino](http://www.mozilla.org/rhino/):\n\n```js\nload('string-escape.js');\n```\n\nUsing an AMD loader like [RequireJS](http://requirejs.org/):\n\n```js\nrequire(\n  {\n    'paths': {\n      'string-escape': 'path/to/string-escape'\n    }\n  },\n  ['string-escape'],\n  function(stringEscape) {\n    console.log(stringEscape);\n  }\n);\n```\n\n## API\n\n### `stringEscape(string, options)`\n\nThis function takes a string and returns an escaped version of the string where any characters that are not printable ASCII symbols are escaped using the shortest possible (but valid) [escape sequences for use in JavaScript strings](http://mathiasbynens.be/notes/javascript-escapes).\n\n```js\nstringEscape('Ich ‚ô• B√ºcher');\n// ‚Üí 'Ich \\\\u2665 B\\\\xFCcher'\n\nstringEscape('foo ùåÜ bar');\n// ‚Üí 'foo \\\\uD834\\\\uDF06 bar'\n```\n\nThe optional `options` argument accepts an object with the following options:\n\n#### `quotes`\n\nThe default value for the `quotes` option is `'single'`. This means that any occurences of `'` in the input string will be escaped as `\\'`, so that the output can be used in a string literal wrapped in single quotes.\n\n```js\nstringEscape('Lorem ipsum \"dolor\" sit \\'amet\\' etc.');\n// ‚Üí 'Lorem ipsum \"dolor\" sit \\\\\\'amet\\\\\\' etc.'\n\nstringEscape('Lorem ipsum \"dolor\" sit \\'amet\\' etc.', {\n  'quotes': 'single'\n});\n// ‚Üí 'Lorem ipsum \"dolor\" sit \\\\\\'amet\\\\\\' etc.'\n// ‚Üí \"Lorem ipsum \\\"dolor\\\" sit \\\\'amet\\\\' etc.\"\n```\n\nIf you want to use the output as part of a string literal wrapped in double quotes, set the `quotes` option to `'double'`.\n\n```js\nstringEscape('Lorem ipsum \"dolor\" sit \\'amet\\' etc.', {\n  'quotes': 'double'\n});\n// ‚Üí 'Lorem ipsum \\\\\"dolor\\\\\" sit \\'amet\\' etc.'\n// ‚Üí \"Lorem ipsum \\\\\\\"dolor\\\\\\\" sit 'amet' etc.\"\n```\n\n#### `wrap`\n\nThe `wrap` option takes a boolean value (`true` or `false`), and defaults to `false` (disabled). When enabled, the output will be a valid JavaScript string literal wrapped in quotes. The type of quotes can be specified through the `quotes` setting.\n\n```js\nstringEscape('Lorem ipsum \"dolor\" sit \\'amet\\' etc.', {\n  'quotes': 'single',\n  'wrap': true\n});\n// ‚Üí '\\'Lorem ipsum \"dolor\" sit \\\\\\'amet\\\\\\' etc.\\''\n// ‚Üí \"\\'Lorem ipsum \\\"dolor\\\" sit \\\\\\'amet\\\\\\' etc.\\'\"\n\nstringEscape('Lorem ipsum \"dolor\" sit \\'amet\\' etc.', {\n  'quotes': 'double',\n  'wrap': true\n});\n// ‚Üí '\"Lorem ipsum \\\\\"dolor\\\\\" sit \\'amet\\' etc.\"'\n// ‚Üí \"\\\"Lorem ipsum \\\\\\\"dolor\\\\\\\" sit \\'amet\\' etc.\\\"\"\n```\n\n#### `escapeEverything`\n\nThe `escapeEverything` option takes a boolean value (`true` or `false`), and defaults to `false` (disabled). When enabled, all the symbols in the output will be escaped, even printable ASCII symbols.\n\n```js\nstringEscape('lolwat\"foo\\'bar', {\n  'escapeEverything': true\n});\n// ‚Üí '\\\\x6C\\\\x6F\\\\x6C\\\\x77\\\\x61\\\\x74\\\\\"\\\\x66\\\\x6F\\\\x6F\\\\\\'\\\\x62\\\\x61\\\\x72'\n// ‚Üí \"\\\\x6C\\\\x6F\\\\x6C\\\\x77\\\\x61\\\\x74\\\\\\\"\\\\x66\\\\x6F\\\\x6F\\\\'\\\\x62\\\\x61\\\\x72\"\n```\n\n### `stringEscape.version`\n\nA string representing the semantic version number.\n\n## Support\n\nThis library has been tested in at least Chrome 27-29, Firefox 3-22, Safari 4-6, Opera 10-12, IE 6-10, Node.js v0.10.0, Narwhal 0.3.2, RingoJS 0.8-0.9, PhantomJS 1.9.0, and Rhino 1.7RC4.\n\n## Unit tests & code coverage\n\nAfter cloning this repository, run `npm install` to install the dependencies needed for development and testing. You may want to install Istanbul _globally_ using `npm install istanbul -g`.\n\nOnce that‚Äôs done, you can run the unit tests in Node using `npm test` or `node tests/tests.js`. To run the tests in Rhino, Ringo, Narwhal, and web browsers as well, use `grunt test`.\n\nTo generate [the code coverage report](http://rawgithub.com/mathiasbynens/javascript-string-escape/master/coverage/string-escape/string-escape.js.html), use `grunt cover`.\n\n## Author\n\n| [![twitter/mathias](http://gravatar.com/avatar/24e08a9ea84deb17ae121074d0f17125?s=70)](http://twitter.com/mathias \"Follow @mathias on Twitter\") |\n|---|\n| [Mathias Bynens](http://mathiasbynens.be/) |\n\n## License\n\nThis library is dual licensed under the [MIT](http://mths.be/mit) and [GPL](http://mths.be/gpl) licenses.\n","readmeFilename":"README.md","_id":"string-escape@0.1.5","dist":{"shasum":"b3fb9b4d583dcfa26859171996de4142ac8fcb48","tarball":"http://registry.npmjs.org/string-escape/-/string-escape-0.1.5.tgz"},"_from":".","_npmVersion":"1.2.19","_npmUser":{"name":"mathias","email":"mathias@qiwi.be"},"maintainers":[{"name":"mathias","email":"mathias@qiwi.be"}],"deprecated":"Package has been deprecated in favor of `jsesc`. Please `npm install jsesc` instead."},"0.1.6":{"name":"string-escape","version":"0.1.6","description":"A JavaScript library for escaping JavaScript strings while generating the shortest possible valid output.","homepage":"http://mths.be/stringescape","main":"string-escape.js","keywords":["string","escape","tool"],"licenses":[{"type":"MIT","url":"http://mths.be/mit"},{"type":"GPL","url":"http://mths.be/gpl"}],"author":{"name":"Mathias Bynens","url":"http://mathiasbynens.be/"},"repository":{"type":"git","url":"https://github.com/mathiasbynens/javascript-string-escape.git"},"bugs":{"url":"https://github.com/mathiasbynens/javascript-string-escape/issues"},"directories":{"test":"tests"},"scripts":{"test":"node tests/tests.js"},"dependencies":{},"devDependencies":{"grunt":"~0.4.1","grunt-shell":"~0.2.2","grunt-template":"~0.1.0","istanbul":"~0.1.37","qunit-clib":"~1.3.0","qunitjs":"~1.11.0","regenerate":"~0.5.1","requirejs":"~2.1.6"},"readme":"ERROR: No README data found!","_id":"string-escape@0.1.6","dist":{"shasum":"4ca1fae8f7e42a4002ebb7ff0d9a4ac0943b194d","tarball":"http://registry.npmjs.org/string-escape/-/string-escape-0.1.6.tgz"},"_from":".","_npmVersion":"1.2.19","_npmUser":{"name":"mathias","email":"mathias@qiwi.be"},"maintainers":[{"name":"mathias","email":"mathias@qiwi.be"}],"deprecated":"Package has been deprecated in favor of `jsesc`. Please `npm install jsesc` instead."},"0.2.0":{"name":"string-escape","version":"0.2.0","description":"A JavaScript library for escaping JavaScript strings while generating the shortest possible valid output.","homepage":"http://mths.be/stringescape","main":"string-escape.js","keywords":["string","escape","tool"],"licenses":[{"type":"MIT","url":"http://mths.be/mit"},{"type":"GPL","url":"http://mths.be/gpl"}],"author":{"name":"Mathias Bynens","url":"http://mathiasbynens.be/"},"repository":{"type":"git","url":"https://github.com/mathiasbynens/javascript-string-escape.git"},"bugs":{"url":"https://github.com/mathiasbynens/javascript-string-escape/issues"},"directories":{"test":"tests"},"scripts":{"test":"node tests/tests.js"},"dependencies":{},"devDependencies":{"grunt":"~0.4.1","grunt-shell":"~0.2.2","grunt-template":"~0.1.0","istanbul":"~0.1.37","qunit-clib":"~1.3.0","qunitjs":"~1.11.0","regenerate":"~0.5.1","requirejs":"~2.1.6"},"readme":"ERROR: No README data found!","_id":"string-escape@0.2.0","dist":{"shasum":"8a042e09fcdc5c50df276c5a02205daf6aeb2061","tarball":"http://registry.npmjs.org/string-escape/-/string-escape-0.2.0.tgz"},"_from":".","_npmVersion":"1.2.30","_npmUser":{"name":"mathias","email":"mathias@qiwi.be"},"maintainers":[{"name":"mathias","email":"mathias@qiwi.be"}],"deprecated":"Package has been deprecated in favor of `jsesc`. Please `npm install jsesc` instead."},"0.2.1":{"name":"string-escape","version":"0.2.1","description":"A JavaScript library for escaping JavaScript strings while generating the shortest possible valid output.","homepage":"http://mths.be/stringescape","main":"string-escape.js","keywords":["string","escape","tool"],"licenses":[{"type":"MIT","url":"http://mths.be/mit"},{"type":"GPL","url":"http://mths.be/gpl"}],"author":{"name":"Mathias Bynens","url":"http://mathiasbynens.be/"},"repository":{"type":"git","url":"https://github.com/mathiasbynens/javascript-string-escape.git"},"bugs":{"url":"https://github.com/mathiasbynens/javascript-string-escape/issues"},"directories":{"test":"tests"},"scripts":{"test":"node tests/tests.js"},"dependencies":{},"devDependencies":{"grunt":"~0.4.1","grunt-shell":"~0.2.2","grunt-template":"~0.1.0","istanbul":"~0.1.37","qunit-clib":"~1.3.0","qunitjs":"~1.11.0","regenerate":"~0.5.1","requirejs":"~2.1.6"},"readme":"ERROR: No README data found!","_id":"string-escape@0.2.1","dist":{"shasum":"3f9c4d134dcfac9770873737fa329395845de977","tarball":"http://registry.npmjs.org/string-escape/-/string-escape-0.2.1.tgz"},"_from":".","_npmVersion":"1.2.30","_npmUser":{"name":"mathias","email":"mathias@qiwi.be"},"maintainers":[{"name":"mathias","email":"mathias@qiwi.be"}],"deprecated":"Package has been deprecated in favor of `jsesc`. Please `npm install jsesc` instead."},"0.2.2":{"name":"string-escape","version":"0.2.2","description":"A JavaScript library for escaping JavaScript strings while generating the shortest possible valid output.","homepage":"http://mths.be/stringescape","main":"string-escape.js","keywords":["string","escape","tool"],"licenses":[{"type":"MIT","url":"http://mths.be/mit"},{"type":"GPL","url":"http://mths.be/gpl"}],"author":{"name":"Mathias Bynens","url":"http://mathiasbynens.be/"},"repository":{"type":"git","url":"https://github.com/mathiasbynens/javascript-string-escape.git"},"bugs":{"url":"https://github.com/mathiasbynens/javascript-string-escape/issues"},"directories":{"test":"tests"},"scripts":{"test":"node tests/tests.js"},"dependencies":{},"devDependencies":{"grunt":"~0.4.1","grunt-shell":"~0.2.2","grunt-template":"~0.1.0","istanbul":"~0.1.37","qunit-clib":"~1.3.0","qunitjs":"~1.11.0","regenerate":"~0.5.1","requirejs":"~2.1.6"},"readme":"# JavaScript string escape [![Build status](https://travis-ci.org/mathiasbynens/javascript-string-escape.png?branch=master)](https://travis-ci.org/mathiasbynens/javascript-string-escape) [![Dependency status](https://gemnasium.com/mathiasbynens/javascript-string-escape.png)](https://gemnasium.com/mathiasbynens/javascript-string-escape)\n\nThis is a JavaScript library for escaping JavaScript strings while generating the shortest possible valid output. [Here‚Äôs an online demo.](http://mothereff.in/js-escapes)\n\nFeel free to fork if you see possible improvements!\n\n## Installation\n\nVia [Bower](http://bower.io/):\n\n```bash\nbower install string-escape\n```\n\nVia [Component](https://github.com/component/component):\n\n```bash\ncomponent install mathiasbynens/javascript-string-escape\n```\n\nVia [npm](http://npmjs.org/):\n\n```bash\nnpm install string-escape\n```\n\nIn a browser:\n\n```html\n<script src=\"string-escape.js\"></script>\n```\n\nIn [Node.js](http://nodejs.org/) and [RingoJS](http://ringojs.org/):\n\n```js\nvar stringEscape = require('string-escape');\n```\n\nIn [Narwhal](http://narwhaljs.org/):\n\n```js\nvar stringEscape = require('string-escape').stringEscape;\n```\n\nIn [Rhino](http://www.mozilla.org/rhino/):\n\n```js\nload('string-escape.js');\n```\n\nUsing an AMD loader like [RequireJS](http://requirejs.org/):\n\n```js\nrequire(\n  {\n    'paths': {\n      'string-escape': 'path/to/string-escape'\n    }\n  },\n  ['string-escape'],\n  function(stringEscape) {\n    console.log(stringEscape);\n  }\n);\n```\n\n## API\n\n### `stringEscape(value, options)`\n\nThis function takes a value and returns an escaped version of the value where any characters that are not printable ASCII symbols are escaped using the shortest possible (but valid) [escape sequences for use in JavaScript strings](http://mathiasbynens.be/notes/javascript-escapes). The first supported value type is strings:\n\n```js\nstringEscape('Ich ‚ô• B√ºcher');\n// ‚Üí 'Ich \\\\u2665 B\\\\xFCcher'\n\nstringEscape('foo ùåÜ bar');\n// ‚Üí 'foo \\\\uD834\\\\uDF06 bar'\n```\n\nInstead of a string, the `value` can also be a flat object containing only string values. In that case, `stringEscape` will return a stringified version of the object where any characters that are not printable ASCII symbols are escaped in the same way.\n\n```js\nstringEscape({\n  'Ich ‚ô• B√ºcher': 'foo ùåÜ bar'\n});\n// ‚Üí '{\\'Ich \\\\u2665 B\\\\xFCcher\\':\\'foo \\\\uD834\\\\uDF06 bar\\'}'\n```\n\nInstead of a string or an object, the `value` can also be a flat array containing only string values. In that case, `stringEscape` will return a stringified version of the array where any characters that are not printable ASCII symbols are escaped in the same way.\n\n```js\nstringEscape([\n  'Ich ‚ô• B√ºcher': 'foo ùåÜ bar'\n]);\n// ‚Üí '[\\'Ich \\\\u2665 B\\\\xFCcher\\',\\'foo \\\\uD834\\\\uDF06 bar\\']'\n```\n\nThe optional `options` argument accepts an object with the following options:\n\n#### `quotes`\n\nThe default value for the `quotes` option is `'single'`. This means that any occurences of `'` in the input string will be escaped as `\\'`, so that the output can be used in a string literal wrapped in single quotes.\n\n```js\nstringEscape('Lorem ipsum \"dolor\" sit \\'amet\\' etc.');\n// ‚Üí 'Lorem ipsum \"dolor\" sit \\\\\\'amet\\\\\\' etc.'\n\nstringEscape('Lorem ipsum \"dolor\" sit \\'amet\\' etc.', {\n  'quotes': 'single'\n});\n// ‚Üí 'Lorem ipsum \"dolor\" sit \\\\\\'amet\\\\\\' etc.'\n// ‚Üí \"Lorem ipsum \\\"dolor\\\" sit \\\\'amet\\\\' etc.\"\n```\n\nIf you want to use the output as part of a string literal wrapped in double quotes, set the `quotes` option to `'double'`.\n\n```js\nstringEscape('Lorem ipsum \"dolor\" sit \\'amet\\' etc.', {\n  'quotes': 'double'\n});\n// ‚Üí 'Lorem ipsum \\\\\"dolor\\\\\" sit \\'amet\\' etc.'\n// ‚Üí \"Lorem ipsum \\\\\\\"dolor\\\\\\\" sit 'amet' etc.\"\n```\n\nThis setting also affects the output for objects:\n\n```js\nstringEscape({ 'Ich ‚ô• B√ºcher': 'foo ùåÜ bar' }, {\n  'quotes': 'double'\n});\n// ‚Üí '{\"Ich \\\\u2665 B\\\\xFCcher\":\"foo \\\\uD834\\\\uDF06 bar\"}'\n```\n\n#### `wrap`\n\nThe `wrap` option takes a boolean value (`true` or `false`), and defaults to `false` (disabled). When enabled, the output will be a valid JavaScript string literal wrapped in quotes. The type of quotes can be specified through the `quotes` setting.\n\n```js\nstringEscape('Lorem ipsum \"dolor\" sit \\'amet\\' etc.', {\n  'quotes': 'single',\n  'wrap': true\n});\n// ‚Üí '\\'Lorem ipsum \"dolor\" sit \\\\\\'amet\\\\\\' etc.\\''\n// ‚Üí \"\\'Lorem ipsum \\\"dolor\\\" sit \\\\\\'amet\\\\\\' etc.\\'\"\n\nstringEscape('Lorem ipsum \"dolor\" sit \\'amet\\' etc.', {\n  'quotes': 'double',\n  'wrap': true\n});\n// ‚Üí '\"Lorem ipsum \\\\\"dolor\\\\\" sit \\'amet\\' etc.\"'\n// ‚Üí \"\\\"Lorem ipsum \\\\\\\"dolor\\\\\\\" sit \\'amet\\' etc.\\\"\"\n```\n\n#### `escapeEverything`\n\nThe `escapeEverything` option takes a boolean value (`true` or `false`), and defaults to `false` (disabled). When enabled, all the symbols in the output will be escaped, even printable ASCII symbols.\n\n```js\nstringEscape('lolwat\"foo\\'bar', {\n  'escapeEverything': true\n});\n// ‚Üí '\\\\x6C\\\\x6F\\\\x6C\\\\x77\\\\x61\\\\x74\\\\\"\\\\x66\\\\x6F\\\\x6F\\\\\\'\\\\x62\\\\x61\\\\x72'\n// ‚Üí \"\\\\x6C\\\\x6F\\\\x6C\\\\x77\\\\x61\\\\x74\\\\\\\"\\\\x66\\\\x6F\\\\x6F\\\\'\\\\x62\\\\x61\\\\x72\"\n```\n\nThis setting also affects the output for arrays and objects:\n\n```js\nstringEscape({ 'Ich ‚ô• B√ºcher': 'foo ùåÜ bar' }, {\n  'escapeEverything': true\n});\n// ‚Üí '{\\'\\x49\\x63\\x68\\x20\\u2665\\x20\\x42\\xFC\\x63\\x68\\x65\\x72\\':\\'\\x66\\x6F\\x6F\\x20\\uD834\\uDF06\\x20\\x62\\x61\\x72\\'}'\n// ‚Üí \"{'\\x49\\x63\\x68\\x20\\u2665\\x20\\x42\\xFC\\x63\\x68\\x65\\x72':'\\x66\\x6F\\x6F\\x20\\uD834\\uDF06\\x20\\x62\\x61\\x72'}\"\n\nstringEscape([ 'Ich ‚ô• B√ºcher': 'foo ùåÜ bar' ], {\n  'escapeEverything': true\n});\n// ‚Üí '[\\'\\x49\\x63\\x68\\x20\\u2665\\x20\\x42\\xFC\\x63\\x68\\x65\\x72\\',\\'\\x66\\x6F\\x6F\\x20\\uD834\\uDF06\\x20\\x62\\x61\\x72\\']'\n```\n\n#### `compact`\n\nThe `compact` option takes a boolean value (`true` or `false`), and defaults to `true` (enabled). When enabled, the output for arrays and objects will be as compact as possible; it won‚Äôt be formatted nicely.\n\n```js\nstringEscape({ 'Ich ‚ô• B√ºcher': 'foo ùåÜ bar' }, {\n  'compact': true // this is the default\n});\n// ‚Üí '{\\'Ich \\u2665 B\\xFCcher\\':\\'foo \\uD834\\uDF06 bar\\'}'\n\nstringEscape({ 'Ich ‚ô• B√ºcher': 'foo ùåÜ bar' }, {\n  'compact': false\n});\n// ‚Üí '{\\n\\t\\'Ich \\u2665 B\\xFCcher\\': \\'foo \\uD834\\uDF06 bar\\'\\n}'\n\nstringEscape(['Ich ‚ô• B√ºcher', 'foo ùåÜ bar'], {\n  'compact': false\n});\n// ‚Üí '[\\n\\t\\'Ich \\u2665 B\\xFCcher\\',\\n\\t\\'foo \\uD834\\uDF06 bar\\'\\n]'\n```\n\nThis setting has no effect on the output for strings.\n\n#### `indent`\n\nThe `indent` option takes a string value, and defaults to `'\\t'`. When the `compact` setting is enabled (`true`), the value of the `indent` option is used to format the output for objects.\n\n```js\nstringEscape({ 'Ich ‚ô• B√ºcher': 'foo ùåÜ bar' }, {\n  'compact': false,\n  'indent': '\\t' // this is the default\n});\n// ‚Üí '{\\n\\t\\'Ich \\u2665 B\\xFCcher\\': \\'foo \\uD834\\uDF06 bar\\'\\n}'\n\nstringEscape({ 'Ich ‚ô• B√ºcher': 'foo ùåÜ bar' }, {\n  'compact': false,\n  'indent': '  '\n});\n// ‚Üí '{\\n  \\'Ich \\u2665 B\\xFCcher\\': \\'foo \\uD834\\uDF06 bar\\'\\n}'\n```\n\nThis setting has no effect on the output for strings.\n\n#### `json`\n\nThe `json` option takes a boolean value (`true` or `false`), and defaults to `false` (disabled). When enabled, the output will always be valid JSON. [Hexadecimal character escape sequences](http://mathiasbynens.be/notes/javascript-escapes#hexadecimal) and the `\\b` or `\\0` escape sequences will not be used. Setting `json: true` implies `quotes: 'double', wrap: true`.\n\n```js\nstringEscape('foo\\x00bar\\xFF\\uFFFDbaz', {\n  'json': true\n});\n// ‚Üí '\"foo\\\\u0000bar\\\\u00FF\\\\uFFFDbaz\"'\n\nstringEscape({ 'foo\\x00bar\\xFF\\uFFFDbaz': 'foo\\x00bar\\xFF\\uFFFDbaz' }, {\n  'json': true\n});\n// ‚Üí '{\"foo\\\\u0000bar\\\\u00FF\\\\uFFFDbaz\":\"foo\\\\u0000bar\\\\u00FF\\\\uFFFDbaz\"}'\n\n```\n\n### `stringEscape.version`\n\nA string representing the semantic version number.\n\n## Support\n\nThis library has been tested in at least Chrome 27-29, Firefox 3-22, Safari 4-6, Opera 10-12, IE 6-10, Node.js v0.10.0, Narwhal 0.3.2, RingoJS 0.8-0.9, PhantomJS 1.9.0, and Rhino 1.7RC4.\n\n## Unit tests & code coverage\n\nAfter cloning this repository, run `npm install` to install the dependencies needed for development and testing. You may want to install Istanbul _globally_ using `npm install istanbul -g`.\n\nOnce that‚Äôs done, you can run the unit tests in Node using `npm test` or `node tests/tests.js`. To run the tests in Rhino, Ringo, Narwhal, and web browsers as well, use `grunt test`.\n\nTo generate [the code coverage report](http://rawgithub.com/mathiasbynens/javascript-string-escape/master/coverage/javascript-string-escape/string-escape.js.html), use `grunt cover`.\n\n## Author\n\n| [![twitter/mathias](http://gravatar.com/avatar/24e08a9ea84deb17ae121074d0f17125?s=70)](http://twitter.com/mathias \"Follow @mathias on Twitter\") |\n|---|\n| [Mathias Bynens](http://mathiasbynens.be/) |\n\n## License\n\nThis library is dual licensed under the [MIT](http://mths.be/mit) and [GPL](http://mths.be/gpl) licenses.\n","readmeFilename":"README.md","_id":"string-escape@0.2.2","dist":{"shasum":"ff196d720c1d6c5ef04c8168b1a2519f04a59c95","tarball":"http://registry.npmjs.org/string-escape/-/string-escape-0.2.2.tgz"},"_from":".","_npmVersion":"1.2.30","_npmUser":{"name":"mathias","email":"mathias@qiwi.be"},"maintainers":[{"name":"mathias","email":"mathias@qiwi.be"}],"deprecated":"Package has been deprecated in favor of `jsesc`. Please `npm install jsesc` instead."},"0.2.3":{"name":"string-escape","version":"0.2.3","description":"A JavaScript library for escaping JavaScript strings while generating the shortest possible valid output.","homepage":"http://mths.be/stringescape","main":"string-escape.js","bin":{"jsesc":"bin/jsesc"},"man":["man/jsesc.1"],"keywords":["string","escape","tool"],"licenses":[{"type":"MIT","url":"http://mths.be/mit"}],"author":{"name":"Mathias Bynens","url":"http://mathiasbynens.be/"},"repository":{"type":"git","url":"https://github.com/mathiasbynens/javascript-string-escape.git"},"bugs":{"url":"https://github.com/mathiasbynens/javascript-string-escape/issues"},"files":["LICENSE-MIT.txt","string-escape.js","bin/","man/"],"directories":{"test":"tests"},"scripts":{"test":"node tests/tests.js"},"dependencies":{},"devDependencies":{"grunt":"~0.4.1","grunt-shell":"~0.2.2","grunt-template":"~0.1.0","istanbul":"~0.1.37","qunit-clib":"~1.3.0","qunitjs":"~1.11.0","regenerate":"~0.5.1","requirejs":"~2.1.6"},"readme":"# JavaScript string escape [![Build status](https://travis-ci.org/mathiasbynens/javascript-string-escape.png?branch=master)](https://travis-ci.org/mathiasbynens/javascript-string-escape) [![Dependency status](https://gemnasium.com/mathiasbynens/javascript-string-escape.png)](https://gemnasium.com/mathiasbynens/javascript-string-escape)\n\nThis is a JavaScript library for escaping JavaScript strings while generating the shortest possible valid output. [Here‚Äôs an online demo.](http://mothereff.in/js-escapes)\n\nFeel free to fork if you see possible improvements!\n\n## Installation\n\nVia [Bower](http://bower.io/):\n\n```bash\nbower install string-escape\n```\n\nVia [Component](https://github.com/component/component):\n\n```bash\ncomponent install mathiasbynens/javascript-string-escape\n```\n\nVia [npm](http://npmjs.org/):\n\n```bash\nnpm install string-escape\n```\n\nIn a browser:\n\n```html\n<script src=\"string-escape.js\"></script>\n```\n\nIn [Node.js](http://nodejs.org/) and [RingoJS](http://ringojs.org/):\n\n```js\nvar stringEscape = require('string-escape');\n```\n\nIn [Narwhal](http://narwhaljs.org/):\n\n```js\nvar stringEscape = require('string-escape').stringEscape;\n```\n\nIn [Rhino](http://www.mozilla.org/rhino/):\n\n```js\nload('string-escape.js');\n```\n\nUsing an AMD loader like [RequireJS](http://requirejs.org/):\n\n```js\nrequire(\n  {\n    'paths': {\n      'string-escape': 'path/to/string-escape'\n    }\n  },\n  ['string-escape'],\n  function(stringEscape) {\n    console.log(stringEscape);\n  }\n);\n```\n\n## API\n\n### `stringEscape(value, options)`\n\nThis function takes a value and returns an escaped version of the value where any characters that are not printable ASCII symbols are escaped using the shortest possible (but valid) [escape sequences for use in JavaScript strings](http://mathiasbynens.be/notes/javascript-escapes). The first supported value type is strings:\n\n```js\nstringEscape('Ich ‚ô• B√ºcher');\n// ‚Üí 'Ich \\\\u2665 B\\\\xFCcher'\n\nstringEscape('foo ùåÜ bar');\n// ‚Üí 'foo \\\\uD834\\\\uDF06 bar'\n```\n\nInstead of a string, the `value` can also be a flat object containing only string values. In that case, `stringEscape` will return a stringified version of the object where any characters that are not printable ASCII symbols are escaped in the same way.\n\n```js\nstringEscape({\n  'Ich ‚ô• B√ºcher': 'foo ùåÜ bar'\n});\n// ‚Üí '{\\'Ich \\\\u2665 B\\\\xFCcher\\':\\'foo \\\\uD834\\\\uDF06 bar\\'}'\n```\n\nInstead of a string or an object, the `value` can also be a flat array containing only string values. In that case, `stringEscape` will return a stringified version of the array where any characters that are not printable ASCII symbols are escaped in the same way.\n\n```js\nstringEscape([\n  'Ich ‚ô• B√ºcher': 'foo ùåÜ bar'\n]);\n// ‚Üí '[\\'Ich \\\\u2665 B\\\\xFCcher\\',\\'foo \\\\uD834\\\\uDF06 bar\\']'\n```\n\nThe optional `options` argument accepts an object with the following options:\n\n#### `quotes`\n\nThe default value for the `quotes` option is `'single'`. This means that any occurences of `'` in the input string will be escaped as `\\'`, so that the output can be used in a string literal wrapped in single quotes.\n\n```js\nstringEscape('Lorem ipsum \"dolor\" sit \\'amet\\' etc.');\n// ‚Üí 'Lorem ipsum \"dolor\" sit \\\\\\'amet\\\\\\' etc.'\n\nstringEscape('Lorem ipsum \"dolor\" sit \\'amet\\' etc.', {\n  'quotes': 'single'\n});\n// ‚Üí 'Lorem ipsum \"dolor\" sit \\\\\\'amet\\\\\\' etc.'\n// ‚Üí \"Lorem ipsum \\\"dolor\\\" sit \\\\'amet\\\\' etc.\"\n```\n\nIf you want to use the output as part of a string literal wrapped in double quotes, set the `quotes` option to `'double'`.\n\n```js\nstringEscape('Lorem ipsum \"dolor\" sit \\'amet\\' etc.', {\n  'quotes': 'double'\n});\n// ‚Üí 'Lorem ipsum \\\\\"dolor\\\\\" sit \\'amet\\' etc.'\n// ‚Üí \"Lorem ipsum \\\\\\\"dolor\\\\\\\" sit 'amet' etc.\"\n```\n\nThis setting also affects the output for arrays and objects:\n\n```js\nstringEscape({ 'Ich ‚ô• B√ºcher': 'foo ùåÜ bar' }, {\n  'quotes': 'double'\n});\n// ‚Üí '{\"Ich \\\\u2665 B\\\\xFCcher\":\"foo \\\\uD834\\\\uDF06 bar\"}'\n\nstringEscape([ 'Ich ‚ô• B√ºcher', 'foo ùåÜ bar' ], {\n  'quotes': 'double'\n});\n// ‚Üí '[\"Ich \\\\u2665 B\\\\xFCcher\",\"foo \\\\uD834\\\\uDF06 bar\"]'\n```\n\n#### `wrap`\n\nThe `wrap` option takes a boolean value (`true` or `false`), and defaults to `false` (disabled). When enabled, the output will be a valid JavaScript string literal wrapped in quotes. The type of quotes can be specified through the `quotes` setting.\n\n```js\nstringEscape('Lorem ipsum \"dolor\" sit \\'amet\\' etc.', {\n  'quotes': 'single',\n  'wrap': true\n});\n// ‚Üí '\\'Lorem ipsum \"dolor\" sit \\\\\\'amet\\\\\\' etc.\\''\n// ‚Üí \"\\'Lorem ipsum \\\"dolor\\\" sit \\\\\\'amet\\\\\\' etc.\\'\"\n\nstringEscape('Lorem ipsum \"dolor\" sit \\'amet\\' etc.', {\n  'quotes': 'double',\n  'wrap': true\n});\n// ‚Üí '\"Lorem ipsum \\\\\"dolor\\\\\" sit \\'amet\\' etc.\"'\n// ‚Üí \"\\\"Lorem ipsum \\\\\\\"dolor\\\\\\\" sit \\'amet\\' etc.\\\"\"\n```\n\n#### `escapeEverything`\n\nThe `escapeEverything` option takes a boolean value (`true` or `false`), and defaults to `false` (disabled). When enabled, all the symbols in the output will be escaped, even printable ASCII symbols.\n\n```js\nstringEscape('lolwat\"foo\\'bar', {\n  'escapeEverything': true\n});\n// ‚Üí '\\\\x6C\\\\x6F\\\\x6C\\\\x77\\\\x61\\\\x74\\\\\"\\\\x66\\\\x6F\\\\x6F\\\\\\'\\\\x62\\\\x61\\\\x72'\n// ‚Üí \"\\\\x6C\\\\x6F\\\\x6C\\\\x77\\\\x61\\\\x74\\\\\\\"\\\\x66\\\\x6F\\\\x6F\\\\'\\\\x62\\\\x61\\\\x72\"\n```\n\nThis setting also affects the output for arrays and objects:\n\n```js\nstringEscape({ 'Ich ‚ô• B√ºcher': 'foo ùåÜ bar' }, {\n  'escapeEverything': true\n});\n// ‚Üí '{\\'\\x49\\x63\\x68\\x20\\u2665\\x20\\x42\\xFC\\x63\\x68\\x65\\x72\\':\\'\\x66\\x6F\\x6F\\x20\\uD834\\uDF06\\x20\\x62\\x61\\x72\\'}'\n// ‚Üí \"{'\\x49\\x63\\x68\\x20\\u2665\\x20\\x42\\xFC\\x63\\x68\\x65\\x72':'\\x66\\x6F\\x6F\\x20\\uD834\\uDF06\\x20\\x62\\x61\\x72'}\"\n\nstringEscape([ 'Ich ‚ô• B√ºcher': 'foo ùåÜ bar' ], {\n  'escapeEverything': true\n});\n// ‚Üí '[\\'\\x49\\x63\\x68\\x20\\u2665\\x20\\x42\\xFC\\x63\\x68\\x65\\x72\\',\\'\\x66\\x6F\\x6F\\x20\\uD834\\uDF06\\x20\\x62\\x61\\x72\\']'\n```\n\n#### `compact`\n\nThe `compact` option takes a boolean value (`true` or `false`), and defaults to `true` (enabled). When enabled, the output for arrays and objects will be as compact as possible; it won‚Äôt be formatted nicely.\n\n```js\nstringEscape({ 'Ich ‚ô• B√ºcher': 'foo ùåÜ bar' }, {\n  'compact': true // this is the default\n});\n// ‚Üí '{\\'Ich \\u2665 B\\xFCcher\\':\\'foo \\uD834\\uDF06 bar\\'}'\n\nstringEscape({ 'Ich ‚ô• B√ºcher': 'foo ùåÜ bar' }, {\n  'compact': false\n});\n// ‚Üí '{\\n\\t\\'Ich \\u2665 B\\xFCcher\\': \\'foo \\uD834\\uDF06 bar\\'\\n}'\n\nstringEscape([ 'Ich ‚ô• B√ºcher', 'foo ùåÜ bar' ], {\n  'compact': false\n});\n// ‚Üí '[\\n\\t\\'Ich \\u2665 B\\xFCcher\\',\\n\\t\\'foo \\uD834\\uDF06 bar\\'\\n]'\n```\n\nThis setting has no effect on the output for strings.\n\n#### `indent`\n\nThe `indent` option takes a string value, and defaults to `'\\t'`. When the `compact` setting is enabled (`true`), the value of the `indent` option is used to format the output for arrays and objects.\n\n```js\nstringEscape({ 'Ich ‚ô• B√ºcher': 'foo ùåÜ bar' }, {\n  'compact': false,\n  'indent': '\\t' // this is the default\n});\n// ‚Üí '{\\n\\t\\'Ich \\u2665 B\\xFCcher\\': \\'foo \\uD834\\uDF06 bar\\'\\n}'\n\nstringEscape({ 'Ich ‚ô• B√ºcher': 'foo ùåÜ bar' }, {\n  'compact': false,\n  'indent': '  '\n});\n// ‚Üí '{\\n  \\'Ich \\u2665 B\\xFCcher\\': \\'foo \\uD834\\uDF06 bar\\'\\n}'\n\nstringEscape([ 'Ich ‚ô• B√ºcher', 'foo ùåÜ bar' ], {\n  'compact': false,\n  'indent': '  '\n});\n// ‚Üí '[\\n  \\'Ich \\u2665 B\\xFCcher\\',\\n\\  t\\'foo \\uD834\\uDF06 bar\\'\\n]'\n```\n\nThis setting has no effect on the output for strings.\n\n#### `json`\n\nThe `json` option takes a boolean value (`true` or `false`), and defaults to `false` (disabled). When enabled, the output will always be valid JSON. [Hexadecimal character escape sequences](http://mathiasbynens.be/notes/javascript-escapes#hexadecimal) and the `\\v` or `\\0` escape sequences will not be used. Setting `json: true` implies `quotes: 'double', wrap: true`.\n\n```js\nstringEscape('foo\\x00bar\\xFF\\uFFFDbaz', {\n  'json': true\n});\n// ‚Üí '\"foo\\\\u0000bar\\\\u00FF\\\\uFFFDbaz\"'\n\nstringEscape({ 'foo\\x00bar\\xFF\\uFFFDbaz': 'foo\\x00bar\\xFF\\uFFFDbaz' }, {\n  'json': true\n});\n// ‚Üí '{\"foo\\\\u0000bar\\\\u00FF\\\\uFFFDbaz\":\"foo\\\\u0000bar\\\\u00FF\\\\uFFFDbaz\"}'\n\nstringEscape([ 'foo\\x00bar\\xFF\\uFFFDbaz', 'foo\\x00bar\\xFF\\uFFFDbaz' ], {\n  'json': true\n});\n// ‚Üí '[\"foo\\\\u0000bar\\\\u00FF\\\\uFFFDbaz\",\"foo\\\\u0000bar\\\\u00FF\\\\uFFFDbaz\"]'\n```\n\n### `stringEscape.version`\n\nA string representing the semantic version number.\n\n### Using the `jsesc` binary\n\nTo use the `jsesc` binary in your shell, simply install javascript-string-escape globally using npm:\n\n```bash\nnpm install -g string-escape\n```\n\nAfter that you will be able to escape strings from the command line:\n\n```bash\n$ jsesc 'f√∂o ‚ô• b√•r ùåÜ baz'\nf\\xF6o \\u2665 b\\xE5r \\uD834\\uDF06 baz\n```\n\nTo escape flat arrays containing only string values or flat objects containing only string values, use the `-o`/`--object` option:\n\n```bash\n$ jsesc '{ \"f√∂o\": \"‚ô•\", \"b√•r\": \"ùåÜ baz\" }'\nf\\xF6o \\u2665 b\\xE5r \\uD834\\uDF06 baz\n```\n\nCreate a version of a JSON file where any non-ASCII symbols are escaped:\n\n```bash\n$ cat data-raw.json | jsesc --json --object > data-escaped.json\n```\n\nSee `jsesc --help` for the full list of options.\n\n## Support\n\nThis library has been tested in at least Chrome 27-29, Firefox 3-22, Safari 4-6, Opera 10-12, IE 6-10, Node.js v0.10.0, Narwhal 0.3.2, RingoJS 0.8-0.9, PhantomJS 1.9.0, and Rhino 1.7RC4.\n\n## Unit tests & code coverage\n\nAfter cloning this repository, run `npm install` to install the dependencies needed for development and testing. You may want to install Istanbul _globally_ using `npm install istanbul -g`.\n\nOnce that‚Äôs done, you can run the unit tests in Node using `npm test` or `node tests/tests.js`. To run the tests in Rhino, Ringo, Narwhal, and web browsers as well, use `grunt test`.\n\nTo generate [the code coverage report](http://rawgithub.com/mathiasbynens/javascript-string-escape/master/coverage/javascript-string-escape/string-escape.js.html), use `grunt cover`.\n\n## Author\n\n| [![twitter/mathias](http://gravatar.com/avatar/24e08a9ea84deb17ae121074d0f17125?s=70)](http://twitter.com/mathias \"Follow @mathias on Twitter\") |\n|---|\n| [Mathias Bynens](http://mathiasbynens.be/) |\n\n## License\n\nThis library is available under the [MIT](http://mths.be/mit) license.\n","readmeFilename":"README.md","_id":"string-escape@0.2.3","dist":{"shasum":"124c99ba65474063248a754436b70cfd329e6b23","tarball":"http://registry.npmjs.org/string-escape/-/string-escape-0.2.3.tgz"},"_from":".","_npmVersion":"1.2.32","_npmUser":{"name":"mathias","email":"mathias@qiwi.be"},"maintainers":[{"name":"mathias","email":"mathias@qiwi.be"}],"deprecated":"Package has been deprecated in favor of `jsesc`. Please `npm install jsesc` instead."},"0.3.0":{"name":"string-escape","version":"0.3.0","description":"A JavaScript library for escaping JavaScript strings while generating the shortest possible valid output.","homepage":"http://mths.be/jsesc","main":"string-escape.js","keywords":["string","escape","tool"],"licenses":[{"type":"MIT","url":"http://mths.be/mit"}],"author":{"name":"Mathias Bynens","url":"http://mathiasbynens.be/"},"repository":{"type":"git","url":"https://github.com/mathiasbynens/jsesc.git"},"bugs":{"url":"https://github.com/mathiasbynens/jsesc/issues"},"files":["string-escape.js"],"readme":"# jsesc [![Build status](https://travis-ci.org/mathiasbynens/jsesc.png?branch=master)](https://travis-ci.org/mathiasbynens/jsesc) [![Dependency status](https://gemnasium.com/mathiasbynens/jsesc.png)](https://gemnasium.com/mathiasbynens/jsesc)\n\nThis is a JavaScript library for [escaping JavaScript strings](http://mathiasbynens.be/notes/javascript-escapes) while generating the shortest possible valid ASCII-only output. [Here‚Äôs an online demo.](http://mothereff.in/js-escapes)\n\nFeel free to fork if you see possible improvements!\n\n## Installation\n\nVia [Bower](http://bower.io/):\n\n```bash\nbower install jsesc\n```\n\nVia [Component](https://github.com/component/component):\n\n```bash\ncomponent install mathiasbynens/jsesc\n```\n\nVia [npm](http://npmjs.org/):\n\n```bash\nnpm install jsesc\n```\n\nIn a browser:\n\n```html\n<script src=\"jsesc.js\"></script>\n```\n\nIn [Node.js](http://nodejs.org/) and [RingoJS](http://ringojs.org/):\n\n```js\nvar jsesc = require('jsesc');\n```\n\nIn [Narwhal](http://narwhaljs.org/):\n\n```js\nvar jsesc = require('jsesc').jsesc;\n```\n\nIn [Rhino](http://www.mozilla.org/rhino/):\n\n```js\nload('jsesc.js');\n```\n\nUsing an AMD loader like [RequireJS](http://requirejs.org/):\n\n```js\nrequire(\n  {\n    'paths': {\n      'jsesc': 'path/to/jsesc'\n    }\n  },\n  ['jsesc'],\n  function(jsesc) {\n    console.log(jsesc);\n  }\n);\n```\n\n## API\n\n### `jsesc(value, options)`\n\nThis function takes a value and returns an escaped version of the value where any characters that are not printable ASCII symbols are escaped using the shortest possible (but valid) [escape sequences for use in JavaScript strings](http://mathiasbynens.be/notes/javascript-escapes). The first supported value type is strings:\n\n```js\njsesc('Ich ‚ô• B√ºcher');\n// ‚Üí 'Ich \\\\u2665 B\\\\xFCcher'\n\njsesc('foo ùåÜ bar');\n// ‚Üí 'foo \\\\uD834\\\\uDF06 bar'\n```\n\nInstead of a string, the `value` can also be a regular expression, an array, or an object. In such cases, `jsesc` will return a stringified version of the value where any characters that are not printable ASCII symbols are escaped in the same way.\n\n```js\n// Escaping a regular expression\njsesc(/¬©ùåÜ/g);\n// ‚Üí '/\\\\xA9\\\\uD834\\\\uDF06/g'\n\n// Escaping an array\njsesc([\n  'Ich ‚ô• B√ºcher', 'foo ùåÜ bar'\n]);\n// ‚Üí '[\\'Ich \\\\u2665 B\\\\xFCcher\\',\\'foo \\\\uD834\\\\uDF06 bar\\']'\n\n// Escaping an object\njsesc({\n  'Ich ‚ô• B√ºcher': 'foo ùåÜ bar'\n});\n// ‚Üí '{\\'Ich \\\\u2665 B\\\\xFCcher\\':\\'foo \\\\uD834\\\\uDF06 bar\\'}'\n```\n\nThe optional `options` argument accepts an object with the following options:\n\n#### `quotes`\n\nThe default value for the `quotes` option is `'single'`. This means that any occurences of `'` in the input string will be escaped as `\\'`, so that the output can be used in a string literal wrapped in single quotes.\n\n```js\njsesc('Lorem ipsum \"dolor\" sit \\'amet\\' etc.');\n// ‚Üí 'Lorem ipsum \"dolor\" sit \\\\\\'amet\\\\\\' etc.'\n\njsesc('Lorem ipsum \"dolor\" sit \\'amet\\' etc.', {\n  'quotes': 'single'\n});\n// ‚Üí 'Lorem ipsum \"dolor\" sit \\\\\\'amet\\\\\\' etc.'\n// ‚Üí \"Lorem ipsum \\\"dolor\\\" sit \\\\'amet\\\\' etc.\"\n```\n\nIf you want to use the output as part of a string literal wrapped in double quotes, set the `quotes` option to `'double'`.\n\n```js\njsesc('Lorem ipsum \"dolor\" sit \\'amet\\' etc.', {\n  'quotes': 'double'\n});\n// ‚Üí 'Lorem ipsum \\\\\"dolor\\\\\" sit \\'amet\\' etc.'\n// ‚Üí \"Lorem ipsum \\\\\\\"dolor\\\\\\\" sit 'amet' etc.\"\n```\n\nThis setting also affects the output for arrays and objects:\n\n```js\njsesc({ 'Ich ‚ô• B√ºcher': 'foo ùåÜ bar' }, {\n  'quotes': 'double'\n});\n// ‚Üí '{\"Ich \\\\u2665 B\\\\xFCcher\":\"foo \\\\uD834\\\\uDF06 bar\"}'\n\njsesc([ 'Ich ‚ô• B√ºcher', 'foo ùåÜ bar' ], {\n  'quotes': 'double'\n});\n// ‚Üí '[\"Ich \\\\u2665 B\\\\xFCcher\",\"foo \\\\uD834\\\\uDF06 bar\"]'\n```\n\n#### `wrap`\n\nThe `wrap` option takes a boolean value (`true` or `false`), and defaults to `false` (disabled). When enabled, the output will be a valid JavaScript string literal wrapped in quotes. The type of quotes can be specified through the `quotes` setting.\n\n```js\njsesc('Lorem ipsum \"dolor\" sit \\'amet\\' etc.', {\n  'quotes': 'single',\n  'wrap': true\n});\n// ‚Üí '\\'Lorem ipsum \"dolor\" sit \\\\\\'amet\\\\\\' etc.\\''\n// ‚Üí \"\\'Lorem ipsum \\\"dolor\\\" sit \\\\\\'amet\\\\\\' etc.\\'\"\n\njsesc('Lorem ipsum \"dolor\" sit \\'amet\\' etc.', {\n  'quotes': 'double',\n  'wrap': true\n});\n// ‚Üí '\"Lorem ipsum \\\\\"dolor\\\\\" sit \\'amet\\' etc.\"'\n// ‚Üí \"\\\"Lorem ipsum \\\\\\\"dolor\\\\\\\" sit \\'amet\\' etc.\\\"\"\n```\n\n#### `escapeEverything`\n\nThe `escapeEverything` option takes a boolean value (`true` or `false`), and defaults to `false` (disabled). When enabled, all the symbols in the output will be escaped, even printable ASCII symbols.\n\n```js\njsesc('lolwat\"foo\\'bar', {\n  'escapeEverything': true\n});\n// ‚Üí '\\\\x6C\\\\x6F\\\\x6C\\\\x77\\\\x61\\\\x74\\\\\"\\\\x66\\\\x6F\\\\x6F\\\\\\'\\\\x62\\\\x61\\\\x72'\n// ‚Üí \"\\\\x6C\\\\x6F\\\\x6C\\\\x77\\\\x61\\\\x74\\\\\\\"\\\\x66\\\\x6F\\\\x6F\\\\'\\\\x62\\\\x61\\\\x72\"\n```\n\nThis setting also affects the output for arrays and objects:\n\n```js\njsesc({ 'Ich ‚ô• B√ºcher': 'foo ùåÜ bar' }, {\n  'escapeEverything': true\n});\n// ‚Üí '{\\'\\x49\\x63\\x68\\x20\\u2665\\x20\\x42\\xFC\\x63\\x68\\x65\\x72\\':\\'\\x66\\x6F\\x6F\\x20\\uD834\\uDF06\\x20\\x62\\x61\\x72\\'}'\n// ‚Üí \"{'\\x49\\x63\\x68\\x20\\u2665\\x20\\x42\\xFC\\x63\\x68\\x65\\x72':'\\x66\\x6F\\x6F\\x20\\uD834\\uDF06\\x20\\x62\\x61\\x72'}\"\n\njsesc([ 'Ich ‚ô• B√ºcher': 'foo ùåÜ bar' ], {\n  'escapeEverything': true\n});\n// ‚Üí '[\\'\\x49\\x63\\x68\\x20\\u2665\\x20\\x42\\xFC\\x63\\x68\\x65\\x72\\',\\'\\x66\\x6F\\x6F\\x20\\uD834\\uDF06\\x20\\x62\\x61\\x72\\']'\n```\n\nThis setting has no effect on the output for regular expressions. Those only use escape sequences for non-printable ASCII symbols and non-ASCII symbols, regardless of the value of the `escapeEverything` setting.\n\n#### `compact`\n\nThe `compact` option takes a boolean value (`true` or `false`), and defaults to `true` (enabled). When enabled, the output for arrays and objects will be as compact as possible; it won‚Äôt be formatted nicely.\n\n```js\njsesc({ 'Ich ‚ô• B√ºcher': 'foo ùåÜ bar' }, {\n  'compact': true // this is the default\n});\n// ‚Üí '{\\'Ich \\u2665 B\\xFCcher\\':\\'foo \\uD834\\uDF06 bar\\'}'\n\njsesc({ 'Ich ‚ô• B√ºcher': 'foo ùåÜ bar' }, {\n  'compact': false\n});\n// ‚Üí '{\\n\\t\\'Ich \\u2665 B\\xFCcher\\': \\'foo \\uD834\\uDF06 bar\\'\\n}'\n\njsesc([ 'Ich ‚ô• B√ºcher', 'foo ùåÜ bar' ], {\n  'compact': false\n});\n// ‚Üí '[\\n\\t\\'Ich \\u2665 B\\xFCcher\\',\\n\\t\\'foo \\uD834\\uDF06 bar\\'\\n]'\n```\n\nThis setting has no effect on the output for strings.\n\n#### `indent`\n\nThe `indent` option takes a string value, and defaults to `'\\t'`. When the `compact` setting is enabled (`true`), the value of the `indent` option is used to format the output for arrays and objects.\n\n```js\njsesc({ 'Ich ‚ô• B√ºcher': 'foo ùåÜ bar' }, {\n  'compact': false,\n  'indent': '\\t' // this is the default\n});\n// ‚Üí '{\\n\\t\\'Ich \\u2665 B\\xFCcher\\': \\'foo \\uD834\\uDF06 bar\\'\\n}'\n\njsesc({ 'Ich ‚ô• B√ºcher': 'foo ùåÜ bar' }, {\n  'compact': false,\n  'indent': '  '\n});\n// ‚Üí '{\\n  \\'Ich \\u2665 B\\xFCcher\\': \\'foo \\uD834\\uDF06 bar\\'\\n}'\n\njsesc([ 'Ich ‚ô• B√ºcher', 'foo ùåÜ bar' ], {\n  'compact': false,\n  'indent': '  '\n});\n// ‚Üí '[\\n  \\'Ich \\u2665 B\\xFCcher\\',\\n\\  t\\'foo \\uD834\\uDF06 bar\\'\\n]'\n```\n\nThis setting has no effect on the output for strings or regular expressions.\n\n#### `json`\n\nThe `json` option takes a boolean value (`true` or `false`), and defaults to `false` (disabled). When enabled, the output is always valid JSON. [Hexadecimal character escape sequences](http://mathiasbynens.be/notes/javascript-escapes#hexadecimal) and [the `\\v` or `\\0` escape sequences](http://mathiasbynens.be/notes/javascript-escapes#single) will not be used. Setting `json: true` implies `quotes: 'double', wrap: true`.\n\n```js\njsesc('foo\\x00bar\\xFF\\uFFFDbaz', {\n  'json': true\n});\n// ‚Üí '\"foo\\\\u0000bar\\\\u00FF\\\\uFFFDbaz\"'\n\njsesc({ 'foo\\x00bar\\xFF\\uFFFDbaz': 'foo\\x00bar\\xFF\\uFFFDbaz' }, {\n  'json': true\n});\n// ‚Üí '{\"foo\\\\u0000bar\\\\u00FF\\\\uFFFDbaz\":\"foo\\\\u0000bar\\\\u00FF\\\\uFFFDbaz\"}'\n\njsesc([ 'foo\\x00bar\\xFF\\uFFFDbaz', 'foo\\x00bar\\xFF\\uFFFDbaz' ], {\n  'json': true\n});\n// ‚Üí '[\"foo\\\\u0000bar\\\\u00FF\\\\uFFFDbaz\",\"foo\\\\u0000bar\\\\u00FF\\\\uFFFDbaz\"]'\n\n// Values that aren‚Äôt strings, regular expressions, arrays, or object literals\n// can‚Äôt be escaped, so they‚Äôll just be preserved:\njsesc([ 'foo\\x00bar', [1, '¬©', { 'foo': true, 'qux': null }], 42 ], {\n  'json': true\n});\n// ‚Üí '[\"foo\\\\u0000bar\",[1,\"\\\\u00A9\",{\"foo\":true,\"qux\":null}],42]'\n```\n\n**Note:** Using this option on objects or arrays that contain non-string values relies on `JSON.parse()`. For legacy environments like IE ‚â§ 7, use [a `JSON` polyfill](http://bestiejs.github.io/json3/).\n\n### `jsesc.version`\n\nA string representing the semantic version number.\n\n### Using the `jsesc` binary\n\nTo use the `jsesc` binary in your shell, simply install jsesc globally using npm:\n\n```bash\nnpm install -g jsesc\n```\n\nAfter that you will be able to escape strings from the command line:\n\n```bash\n$ jsesc 'f√∂o ‚ô• b√•r ùåÜ baz'\nf\\xF6o \\u2665 b\\xE5r \\uD834\\uDF06 baz\n```\n\nTo escape arrays or objects containing string values, use the `-o`/`--object` option:\n\n```bash\n$ jsesc --object '{ \"f√∂o\": \"‚ô•\", \"b√•r\": \"ùåÜ baz\" }'\n{'f\\xF6o':'\\u2665','b\\xE5r':'\\uD834\\uDF06 baz'}\n```\n\nTo prettify the output in such cases, use the `-p`/`--pretty` option:\n\n```bash\n$ jsesc --pretty '{ \"f√∂o\": \"‚ô•\", \"b√•r\": \"ùåÜ baz\" }'\n{\n  'f\\xF6o': '\\u2665',\n  'b\\xE5r': '\\uD834\\uDF06 baz'\n}\n```\n\nFor valid JSON output, use the `-j`/`--json` option:\n\n```bash\n$ jsesc --json --pretty '{ \"f√∂o\": \"‚ô•\", \"b√•r\": \"ùåÜ baz\" }'\n{\n  \"f\\u00F6o\": \"\\u2665\",\n  \"b\\u00E5r\": \"\\uD834\\uDF06 baz\"\n}\n```\n\nRead a local JSON file, escape any non-ASCII symbols, and save the result to a new file:\n\n```bash\n$ jsesc --json --object < data-raw.json > data-escaped.json\n```\n\nOr do the same with an online JSON file:\n\n```bash\n$ curl -sL \"http://git.io/aorKgQ\" | jsesc --json --object > data-escaped.json\n```\n\nSee `jsesc --help` for the full list of options.\n\n## Support\n\nThis library has been tested in at least Chrome 27-29, Firefox 3-22, Safari 4-6, Opera 10-12, IE 6-10, Node.js v0.10.0, Narwhal 0.3.2, RingoJS 0.8-0.9, PhantomJS 1.9.0, and Rhino 1.7RC4.\n\n**Note:** Using the `json` option on objects or arrays that contain non-string values relies on `JSON.parse()`. For legacy environments like IE ‚â§ 7, use [a `JSON` polyfill](http://bestiejs.github.io/json3/).\n\n## Unit tests & code coverage\n\nAfter cloning this repository, run `npm install` to install the dependencies needed for development and testing. You may want to install Istanbul _globally_ using `npm install istanbul -g`.\n\nOnce that‚Äôs done, you can run the unit tests in Node using `npm test` or `node tests/tests.js`. To run the tests in Rhino, Ringo, Narwhal, and web browsers as well, use `grunt test`.\n\nTo generate [the code coverage report](http://rawgithub.com/mathiasbynens/jsesc/master/coverage/jsesc/jsesc.js.html), use `grunt cover`.\n\n## Author\n\n| [![twitter/mathias](http://gravatar.com/avatar/24e08a9ea84deb17ae121074d0f17125?s=70)](http://twitter.com/mathias \"Follow @mathias on Twitter\") |\n|---|\n| [Mathias Bynens](http://mathiasbynens.be/) |\n\n## License\n\nThis library is available under the [MIT](http://mths.be/mit) license.\n","readmeFilename":"README.md","_id":"string-escape@0.3.0","dist":{"shasum":"857529624389719c2152b981719339b98c7f53e5","tarball":"http://registry.npmjs.org/string-escape/-/string-escape-0.3.0.tgz"},"_from":".","_npmVersion":"1.2.32","_npmUser":{"name":"mathias","email":"mathias@qiwi.be"},"maintainers":[{"name":"mathias","email":"mathias@qiwi.be"}],"directories":{}}},"readme":"# JavaScript string escape [![Build status](https://travis-ci.org/mathiasbynens/javascript-string-escape.png?branch=master)](https://travis-ci.org/mathiasbynens/javascript-string-escape) [![Dependency status](https://gemnasium.com/mathiasbynens/javascript-string-escape.png)](https://gemnasium.com/mathiasbynens/javascript-string-escape)\n\nThis is a JavaScript library for escaping JavaScript strings while generating the shortest possible valid output.\n\nFeel free to fork if you see possible improvements!\n\n## Installation\n\nIn a browser:\n\n```html\n<script src=\"string-escape.js\"></script>\n```\n\nVia [npm](http://npmjs.org/):\n\n```bash\nnpm install string-escape\n```\n\nIn [Narwhal](http://narwhaljs.org/), [Node.js](http://nodejs.org/), and [RingoJS](http://ringojs.org/):\n\n```js\nvar stringEscape = require('string-escape');\n```\n\nIn [Rhino](http://www.mozilla.org/rhino/):\n\n```js\nload('string-escape.js');\n```\n\nUsing an AMD loader like [RequireJS](http://requirejs.org/):\n\n```js\nrequire(\n  {\n    'paths': {\n      'string-escape': 'path/to/string-escape'\n    }\n  },\n  ['string-escape'],\n  function(stringEscape) {\n    console.log(stringEscape);\n  }\n);\n```\n\n## API\n\n### `stringEscape(string, options)`\n\nThis function takes a string and returns an escaped version of the string where any characters that are not printable ASCII symbols are escaped using the shortest possible (but valid) [escape sequences for use in JavaScript strings](http://mathiasbynens.be/notes/javascript-escapes).\n\n```js\nstringEscape('Ich ‚ô• B√ºcher');\n// ‚Üí 'Ich \\\\u2665 B\\\\xFCcher'\n\nstringEscape('foo ùåÜ bar');\n// ‚Üí 'foo \\\\uD834\\\\uDF06 bar'\n```\n\nThe optional `options` argument accepts an object with the following options:\n\n#### `quotes`\n\nThe default value for the `quotes` option is `'single'`. This means that any occurences of `'` in the input string will be escaped as `\\'`, so that the output can be used in a string literal wrapped in single quotes.\n\n```js\nstringEscape('Lorem ipsum \"dolor\" sit \\'amet\\' etc.');\n// ‚Üí 'Lorem ipsum \"dolor\" sit \\\\\\'amet\\\\\\' etc.'\n\nstringEscape('Lorem ipsum \"dolor\" sit \\'amet\\' etc.', {\n  'quotes': 'single'\n});\n// ‚Üí 'Lorem ipsum \"dolor\" sit \\\\\\'amet\\\\\\' etc.'\n// ‚Üí \"Lorem ipsum \\\"dolor\\\" sit \\\\'amet\\\\' etc.\"\n```\n\nIf you want to use the output as part of a string literal wrapped in double quotes, set the `quotes` option to `'double'`.\n\n```js\nstringEscape('Lorem ipsum \"dolor\" sit \\'amet\\' etc.', {\n  'quotes': 'double'\n});\n// ‚Üí 'Lorem ipsum \\\\\"dolor\\\\\" sit \\'amet\\' etc.'\n// ‚Üí \"Lorem ipsum \\\\\\\"dolor\\\\\\\" sit 'amet' etc.\"\n```\n\n### `stringEscape.version`\n\nA string representing the semantic version number.\n\n## Support\n\nThis library has been tested in at least Chrome 27-29, Firefox 3-22, Safari 4-6, Opera 10-12, IE 6-10, Node.js v0.10.0, Narwhal 0.3.2, RingoJS 0.8-0.9, PhantomJS 1.9.0, and Rhino 1.7RC4.\n\n## Unit tests & code coverage\n\nAfter cloning this repository, run `npm install` to install the dependencies needed for development and testing. You may want to install Istanbul _globally_ using `npm install istanbul -g`.\n\nOnce that‚Äôs done, you can run the unit tests in Node using `npm test` or `node tests/tests.js`. To run the tests in Rhino, Ringo, Narwhal, and web browsers as well, use `grunt test`.\n\nTo generate [the code coverage report](http://rawgithub.com/mathiasbynens/javascript-string-escape/master/coverage/string-escape/string-escape.js.html), use `grunt cover`.\n\n## Author\n\n| [![twitter/mathias](http://gravatar.com/avatar/24e08a9ea84deb17ae121074d0f17125?s=70)](http://twitter.com/mathias \"Follow @mathias on Twitter\") |\n|---|\n| [Mathias Bynens](http://mathiasbynens.be/) |\n\n## License\n\nThis library is dual licensed under the [MIT](http://mths.be/mit) and [GPL](http://mths.be/gpl) licenses.\n","maintainers":[{"name":"mathias","email":"mathias@qiwi.be"}],"time":{"modified":"2013-07-30T19:59:11.469Z","created":"2013-06-05T10:00:13.854Z","0.1.0":"2013-06-05T10:00:16.791Z","0.1.1":"2013-06-05T11:25:09.846Z","0.1.2":"2013-06-05T20:06:35.228Z","0.1.3":"2013-06-05T20:53:13.027Z","0.1.4":"2013-06-05T21:30:39.303Z","0.1.5":"2013-06-06T08:02:58.108Z","0.1.6":"2013-06-17T12:24:37.747Z","0.2.0":"2013-06-28T14:12:36.515Z","0.2.1":"2013-06-28T17:20:25.089Z","0.2.2":"2013-06-28T18:38:47.877Z","0.2.3":"2013-07-26T15:02:11.732Z","0.3.0":"2013-07-30T19:59:11.469Z"},"author":{"name":"Mathias Bynens","url":"http://mathiasbynens.be/"},"repository":{"type":"git","url":"https://github.com/mathiasbynens/jsesc.git"},"_attachments":{},"_etag":"\"21TOL1KT7NPR9ENE1FFWAG74Y\""}